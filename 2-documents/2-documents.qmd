---
title: "Documents"
subtitle: "From R Markdown to Quarto"
# footer: "[ðŸ”— mine.quarto.pub/quarto-asa-nebraska](https://mine.quarto.pub/quarto-asa-nebraska)"
format:
  revealjs:
    author:
      - "Andrew Bray"
      - "Mine Ã‡etinkaya Rundel"
    institute:
      - "UC Berkeley"
      - "Duke University + Posit"
    transition: fade
    slide-number: true
    chalkboard: false
    logo: "../images/logo.png"
    theme: [../style/quarto-asa.scss, ../style/slides.scss]
---

```{r}
#| label: setup
#| include: false

# set width of code output
options(width = 65)

# load background packages
library(countdown)
library(gt)
```

# Anatomy of a Quarto document

## Components

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: Executed via `knitr` or `jupyter`

. . .

**Weave it all together**, and you have beautiful, powerful, and useful outputs!

## Literate programming {.smaller}

Literate programming is writing out the program logic in a human language with included code snippets (separated by a primitive markup) and macros.

````         
---
title: "ggplot2 demo"
date: "5/19/2023"
format: html
---

## MPG

There is a relationship between city and highway mileage.

```{{r}}
#| label: fig-mpg

library(ggplot2)

ggplot(mpg, aes(x = cty, y = hwy)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
````

::: aside
Source: <https://en.wikipedia.org/wiki/Literate_programming>
:::

# Metadata

## YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language" is used to provide document level metadata.

``` yaml
---
key: value
---
```

## Output options

``` yaml
---
format: something
---
```

. . .

<br>

``` yaml
---
format: html
---
```

``` yaml
---
format: pdf
---
```

``` yaml
---
format: revealjs
---
```

## Output option arguments

Indentation matters!

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML validation {.smaller}

-   Invalid: No space after `:`

``` yaml
---
format:html
---
```

-   Invalid: Read as missing

``` yaml
---
format:
html
---
```

-   Valid, but needs next object

``` yaml
---
format: 
  html:
---
```

## YAML validation {.smaller}

There are multiple ways of formatting valid YAML:

-   Valid: There's a space after `:`

``` yaml
format: html
```

-   Valid: There are 2 spaces a new line and no trailing `:`

``` yaml
format:
  html
```

-   Valid: `format: html` with additional options made with proper indentation

``` yaml
format: 
  html:
    toc: true
```

## Why YAML?

To avoid manually typing out all the options, every time when rendering via the CLI:

. . .

``` bash
quarto render document.qmd --to html
```

<br>

. . .

``` bash
quarto render document.qmd --to html -M code-fold:true
```

<br>

. . .

``` bash
quarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3
```

## Quarto linting

Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.

<br>

::: columns
::: {.column width="50%"}
![](images/lint-rstudio.png)
:::

::: {.column width="50%"}
![](images/lint-vscode.png)
:::
:::

::: aside
Source: <https://en.wikipedia.org/wiki/Lint_(software)>
:::

## Quarto YAML Intelligence

RStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.

<br>

![](images/quarto-tab-complete.png){fig-align="center" width="600"}

## Your turn

::: task
-   Open `hello-penguins.qmd` in RStudio.
-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options.
-   Try out the tab-completion of any options you remember.
-   You can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) as needed.
:::

```{r}
#| echo: false

countdown(minutes = 3)
```

## List of valid YAML fields

-   Many YAML fields are common across various outputs

-   But also each output type has its own set of valid YAML fields and options

-   Definitive list: [quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

# Text

## Text Formatting

+-------------------------------+-------------------------------+
| Markdown Syntax               | Output                        |
+===============================+===============================+
| ```                           | *italics* and **bold**        |
| *italics* and **bold**        |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | superscript^2^ / subscript~2~ |
| superscript^2^ / subscript~2~ |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | ~~strikethrough~~             |
| ~~strikethrough~~             |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | `verbatim code`               |
| `verbatim code`               |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+

: {tbl-colwidths="\[50,50\]"}

## Headings {.smaller}

+-----------------+-----------------+
| Markdown Syntax | Output          |
+=================+=================+
| ```             | # Header 1      |
| # Header 1      |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ## Header 2     |
| ## Header 2     |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ### Header 3    |
| ### Header 3    |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | #### Header 4   |
| #### Header 4   |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ##### Header 5  |
| ##### Header 5  |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ###### Header 6 |
| ###### Header 6 |                 |
| ```             |                 |
+-----------------+-----------------+

: {tbl-colwidths="\[50,50\]"}

## Links {.smaller}

There are several types of "links" or hyperlinks.

::: columns
::: {.column width="60%"}
**Markdown**

``` markdown
You can embed [named hyperlinks](https://quarto.org/),
direct urls like <https://quarto.org/>, and links to 
[other places](#quarto-anatomy) in 
the document. The syntax is similar for embedding an
inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png).
```
:::

::: {.column .fragment width="40%"}
**Output**

You can embed [named hyperlinks](https://quarto.org/), direct urls like <https://quarto.org/>, and links to [other places](#quarto-anatomy) in the document. The syntax is similar for embedding an inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png){style="width:250px;"}.
:::
:::

## Markdown figures

```         
![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)
```

![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)

## Markdown figures with options

::: columns
::: {.column width="50%"}
```         
![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png){fig-align="left"}
```

![](images/penguins-quarto-ball.png)
:::

::: {.column width="50%"}
```         
![](images/penguins-quarto-ball.png){fig-align="right" fig-alt="Illustration of two penguins playing with a Quarto ball."}
```

![](images/penguins-quarto-ball.png){fig-align="right" fig-alt="Illustration of two penguins playing with a Quarto ball."}
:::
:::

## Lists {.smaller}

Unordered list:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
-   unordered list         
    -   sub-item 1         
    -   sub-item 1         
        -   sub-sub-item 1 
```
:::

::: {.column .fragment width="50%" fragment-index="1"}
**Output**

-   unordered list
    -   sub-item 1\
    -   sub-item 1
        -   sub-sub-item 1
:::
:::

Ordered list:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
1. ordered list            
2. item 2                  
    i. sub-item 1          
         A.  sub-sub-item 1
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Output**

1.  ordered list\
2.  item 2
    i.  sub-item 1
        A.  sub-sub-item 1
:::
:::

## Quotes

**Markdown:**

``` markdown
> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. 
> - Donald Knuth, Literate Programming
```

. . .

**Output:**

> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming

::: aside
"Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)
:::

## Your turn

::: task
-   Open `markdown-syntax.qmd` in RStudio.
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

```{r}
#| echo: false

countdown(minutes = 5)
```

# Quarto Elements

## {menu-title="Disclaimers"}

:::{.columns align=center}
:::{.column width=20%}
:::
:::{.column .incremental width=60%}
\

### What you're about to see . . .

- Most of the elements work across the main output formats (html, pdf, docx, pptx)
- Most of this is new Quarto functionality. Some of it is original Pandoc.
- This is a subset of the elements available. See the Quarto Guide for the full list.
:::
:::{.column width=20%}
:::
:::


## The Bracketed Span {transition="none"}

![](images/quarto-workshop-07.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-08.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-09.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-10.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-11.jpg){fig-align="center"}

## The Fenced Div {transition="none"}

![](images/quarto-workshop-12.jpg){fig-align="center"}


## Example: Callout Blocks {auto-animate=true}

Use case: highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%" .fragment}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column .fragment width="50%"}
#### HTML output

::: callout-note
Look - a squirrel!
:::

::: callout-important
Look - a squirrel!
:::

::: callout-tip
Look - a squirrel!
:::
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### pdf output

![](images/callouts-pdf.png)
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### docx output

![](images/callouts-doc.png)
:::

\
\
:::


## Your turn

::: task
-   Open `callout-boxes.qmd` and render the document.
-   Change the type of the first callout box and then re-render. Also try adding attributes inside `{ }` to learn what they do.
    - `icon=true` or `icon=false`.
    - `appearance="simple"` (can also try `"minimal"` and `"default"`).
-   Make the second callout box collapsible.
-   Change the format to PDF and re-render.
:::

```{r}
#| echo: false

countdown(minutes = 3)
```


# Code

## R Markdown's Code Chunk

::: columns
::: {.column width=20%}
:::

::: {.column width=60% style="font-size: 1.5em"}
    ```{{r, echo=FALSE}}
    rnorm(3)
    ```
:::

::: {.column width=20%}
:::
:::

. . .

:::{.task}
What syntax is being used in `echo=FALSE`?

1.  HTML
2.  Pandoc attribute syntax
3.  YAML
4.  CSS
5.  R
:::


## Generalizing the Code Chunk {auto-animate="true"}

How can this be generalized to other languages?

::: columns
::: {.column width="50%"}
    ```{{r, echo=FALSE}}
    rnorm(3)
    ```
:::

::: {.column width="50%"}

:::
:::

## Generalizing the Code Chunk {auto-animate="true"}

How can this be generalized to other languages?

::: columns
::: {.column width="50%"}
    ```{{language, echo=FALSE}}
    code
    ```
:::

::: {.column width="50%"}
-   Executable code flagged by `{}`
-   Support R, Python, Julia
-   Also support `mermaid` and `dot` diagram languages.
:::
:::


## Generalizing the Code Chunk {auto-animate="true"}

How can this be generalized to other languages?

::: columns
::: {.column width="50%"}
    ```{{language}}
    #| echo: false

    code
    ```
:::

::: {.column width="50%"}
-   Executable code flagged by `{}`
-   Support R, Python, Julia
-   Also support `mermaid` and `dot` diagram languages[^3]
-   Cell options live inside the cell after `#|` (the hash pipe!)[^4]

::: fragment
[**This is a Quarto Code Cell.**]{style="color: green"}
:::
:::
:::

[^3]: See <https://quarto.org/docs/authoring/diagrams.html>.

[^4]: The hash pipe is available in the R Markdown too.

## The Perks of the Hashpipe `#|`

::: {.fragment style="margin-left: 20px; white-space: nowrap"}
1.  Line breaks prevent chunk options that go on `{r, and=on, and=on, and=on, and=on, and=on, and=on}`{style="white-space: nowrap"}
:::

::: {.fragment style="margin-left: 20px"}
2.  Chunk options are now pan-language with `<commentchar>|`.

::: columns
::: {.column width="50%"}
````markdown
```{{python}}
#| echo: false
```
````
:::

::: {.column width="50%"}
````markdown
```{{mermaid}}
%%| echo: false
```
````
:::
:::
:::

::: {.fragment style="margin-left: 20px; white-space: nowrap"}
3.  No more yelling! (`eval=FALSE`)
:::

## Execution Options

Control how the code is executed with options.

::: {style="font-size: .8em"}
| Option    | Description                                                                                                                                                                                       |
|------------|------------------------------------------------------------|
| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
| `echo`    | Include the source code in output                                                                                                                                                                 |
| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |
| `warning` | Include warnings in the output.                                                                                                                                                                   |
| `error`   | Include errors in the output.                                                                                                                                                                     |
| `include` | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                      |
:::


##  {menu-title="YAML Intelligence"}

\
\

[Don't forget to use cmd-space to see the available options!]{style="align: center"}

![](images/code-yaml-intelligence.png){width="100px"}

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="7"}
---
title: My Doc
format: html
---

```{{r}}
#| echo: true

pi + 1
```
````
:::
:::

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="4,5"}
---
title: My Doc
format: html
execute:
  echo: true
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.
:::
:::

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="6-8"}
---
title: My Doc
format: html
execute:
  echo: true
knitr:
  opts_chunk: 
    collapse: true
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.

- You can also pass options via YAML to knitr through the `knitr` key[^setup].
:::
:::

[^setup]: No more ````{r setup}` :tada:


## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="9-10"}
---
title: My Doc
format: html
execute:
  echo: true
knitr:
  opts_chunk: 
    collapse: true
    R.options:
      digits: 2
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.

- You can also pass options via YAML to knitr through the `knitr` key[^setup].

- You can use knitr to pass options that control your R session.
:::
:::

[^setup]: No more ````{r setup}` :tada:


## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| 
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "Size of penguins on three islands in the Palmer Archipelago."
#| fig-alt: "Scatterplot showing the bill sizes of penguins across three islands."

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "Size of penguins on three islands in the Palmer Archipelago."
#| fig-alt: "Scatterplot showing the bill sizes of penguins across three islands."


library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

. . .

> Save time/code by moving figure sizing defaults up to the YAML.

## Example: Simple Dataframes

. . .

R's default isn't designed for effective display.

:::columns
:::{.column width=40%}
````markdown
```{{r}}
penguins
```
````
:::
:::{.column width=60%}
```{r}
penguins
```

:::
:::

## `knitr::kable`

`kable()` creates tables for $\LaTeX$, HTML, and Markdown output.

:::columns
:::{.column width=40%}
````markdown
```{{r}}
knitr::kable(penguins)
```
````
:::
:::{.column width=60%}
```{r}
#| label: ex-kable
knitr::kable(penguins)
```
:::
:::

## `knitr::kable`

`df-print: kable` available as a document-level option.

:::columns
:::{.column width=40%}
````markdown
---
format:
  html:
    df-print: kable
---

```{{r}}
penguins
```
````
:::
:::{.column width=60%}
```{r}
#| ref.label="ex-kable"
```
:::
:::

## Paged Output

`df-print: paged` available as a document-level option.

:::columns
:::{.column width=40%}
````markdown
---
format:
  html:
    df-print: paged
---

```{{r}}
penguins
```
````
:::
:::{.column width=60%}
![](images/paged-df.png){width=70%}
:::
:::


## Your turn

::: task
-   Open `code-output.qmd` and render the document.
-   Add `echo: false` to the code cell and re-render.
-   Add another cell options found in the [Quarto Reference](https://quarto.org/docs/reference/cells/cells-knitr.html) (try `code-folding`).
-   Add a second code cell (you can copy + paste the first), move your cell options to the YAML, and re-render.
:::

```{r}
#| echo: false

countdown(minutes = 7)
```

# Wrap up

## Questions

::: task
Any questions / anything you'd like to review before we wrap up this module?
:::

# Learning more

1. See Modules 3 (Presentations) and Module 4 (Websites)
2. <https://quarto.org/>
3. Quarto Workshop at Posit Conference in September in Chicago.

. . .

Thank you.


# Appendix

# Cross references

## Cross references

-   Help readers to navigate your document with numbered references and hyperlinks to entities like figures and tables.

-   Cross referencing steps:

    -   Add a caption to your figure or table.
    -   Give an id to your figure or table, starting with `fig-` or `tbl-`.
    -   Refer to it with `@fig-...` or `@tbl-...`.

## Figure cross references {.smaller}

The presence of the caption (`Blue penguin`) and label (`#fig-blue-penguin`) make this figure referenceable:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
See @fig-blue-penguin for a cute blue penguin.
![Blue penguin](images/blue-penguin.png){#fig-blue-penguin}
```
:::

::: {.column width="50%"}
**Output:**

See @fig-blue-penguin for a cute blue penguin.

![Blue penguin](images/blue-penguin.png){#fig-blue-penguin fig-alt="A blue penguin" width="200"}
:::
:::

## Table cross references {.smaller}

The presence of the caption (`A few penguins`) and label (`#tbl-penguins`) make this table referenceable:

::: columns
::: {.column width="50%"}
**Markdown:**

```` markdown
See @tbl-penguins for data on a few penguins.

```{{r}}
#| label: tbl-penguins
#| tbl-cap: A few penguins

head(penguins) |> 
  gt()
```
````
:::

::: {.column width="50%"}
**Output:**

See @tbl-penguins for data on a few penguins.

```{r}
#| label: tbl-penguins
#| tbl-cap: A few penguins

head(penguins) |> 
  gt()
```
:::
:::
